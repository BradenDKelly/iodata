# IODATA is an input and output module for quantum chemistry.
# Copyright (C) 2011-2020 The IODATA Development Team
#
# This file is part of IODATA.
#
# IODATA is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# IODATA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
# --
"""Test iodata.formats.wfn module."""


import numpy as np

from numpy.testing import assert_equal, assert_allclose

from .common import compute_mulliken_charges, check_orthonormal
from ..api import load_one, dump_one
from ..formats.mwfn import load_mwfn_low
from ..overlap import compute_overlap
from ..utils import LineIterator

try:
    from importlib_resources import path
except ImportError:
    from importlib.resources import path


def helper_load_mwfn_low(fn_mwfn):
    """Load a testing Gaussian log file with iodata.formats.mwfn.load_mwfn_low."""
    with path('iodata.test.data', fn_mwfn) as fn:
        lit = LineIterator(str(fn))
        return load_mwfn_low(lit)


def test_load_mwfn_low_h20_rks():
    data = helper_load_mwfn_low('h2o_rks.mwfn')

    # Correct hard-coded values to compare with
    wfntype, charge, nelec_a, nelec_b, energy, vt_ratio = 0, 0.0, 5.0, 5.0, -7.64089540E+01, 2.0777436
    nbasis, nindbasis, nprims, nshell, nprimshell = 19, 19, 36, 10, 23
    shelltypes = np.array([0, 0, 1, 0, 1, 2, 0, 0, 0, 0])
    shellcenters = np.array([1, 1, 1, 1, 1, 1, 2, 2, 3, 3]) - 1
    shell_contr_deg = np.array([6, 3, 3, 1, 1, 1, 3, 1, 3, 1])
    atcoords = np.array([[0.00000000, 0.00000000, 0.11976353], [-0.00000000, 0.76149590, -0.47905410],
                         [-0.00000000, -0.76149590, -0.47905410]])
    exponents = np.array([5.48467166E+03, 8.25234946E+02, 1.88046958E+02, 5.29645000E+01, 1.68975704E+01,
                          5.79963534E+00, 1.55396162E+01, 3.59993359E+00, 1.01376175E+00, 1.55396162E+01,
                          3.59993359E+00, 1.01376175E+00, 2.70005823E-01, 2.70005823E-01, 8.00000000E-01,
                          1.87311370E+01, 2.82539436E+00, 6.40121692E-01, 1.61277759E-01, 1.87311370E+01,
                          2.82539436E+00, 6.40121692E-01, 1.61277759E-01])
    coeffs = np.array([1.83107443E-03, 1.39501722E-02, 6.84450781E-02, 2.32714336E-01, 4.70192898E-01,
                       3.58520853E-01, -1.10777550E-01, -1.48026263E-01, 1.13076702E+00, 7.08742682E-02,
                       3.39752839E-01, 7.27158577E-01, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00,
                       3.34946043E-02, 2.34726953E-01, 8.13757326E-01, 1.00000000E+00, 3.34946043E-02,
                       2.34726953E-01, 8.13757326E-01, 1.00000000E+00])
    mo_index = np.arange(19)
    mo_type = np.zeros((nindbasis))
    mo_energies = np.array([-1.91381793E+01, -9.97885402E-01, -5.17106062E-01, -3.72242342E-01,
                            -2.91192646E-01, 6.25926904E-02, 1.48109745E-01, 7.72403532E-01,
                            8.60945181E-01, 8.90777103E-01, 8.95101881E-01, 1.06576889E+00,
                            1.19348317E+00, 1.72906487E+00, 1.74638848E+00, 1.77979372E+00,
                            2.28055071E+00, 2.57705471E+00, 3.55187200E+00])
    mo_occ = np.zeros((nindbasis))
    mo_occ[0], mo_occ[1], mo_occ[2], mo_occ[3], mo_occ[4] = 2.00, 2.00, 2.00, 2.00, 2.00
    mo_sym = np.full((nindbasis), '?', dtype=str)

    # assert results match
    assert data['title'] == '# Generated by Multiwfn'
    assert_equal(exponents, data['exponents'])
    assert_equal(3, len(data['atnums']))
    assert_equal(atcoords, data['atcoords'])
    assert_equal(shellcenters, data['shell_centers'])
    assert_equal(shelltypes, data['shell_types'])
    assert_equal(shell_contr_deg, data['prim_per_shell'])
    assert_equal(exponents, data['exponents'])
    assert_equal(coeffs, data['coeffs'])
    assert_equal(np.arange(19)+1, data['mo_numbers'])
    assert_equal(mo_occ, data['mo_occs'])
    assert_equal(mo_energies, data['mo_energies'])
    assert_equal(energy, data['energy'])
    assert_equal(mo_type, data['mo_type'])
    assert_equal(mo_sym, data['mo_sym'])
    assert_equal(0, data['wfntype'])
    assert_equal(5.0, data['nelec_a'])
    assert_equal(5.0, data['nelec_b'])


def test_load_one_mwfn_low_h20_rks():
    wfntype, energy, vt_ratio = 0, -7.64089540E+01, 2.0777436
    nbasis, nindbasis, nprims, nshell, nprimshell = 19, 19, 36, 10, 23
    shelltypes = np.array([0,0,1,0,1,2,0,0,0,0])
    shellcenters  = np.array([1,1,1,1,1,1,2,2,3,3])
    shell_contr_deg = np.array([6,3,3,1,1,1,3,1,3,1])
    atcoords = np.array([[0.00000000, 0.00000000, 0.11976353], [-0.00000000, 0.76149590, -0.47905410],
                        [-0.00000000, -0.76149590, -0.47905410]])
    mo_energies = np.array([-1.91381793E+01, -9.97885402E-01, -5.17106062E-01, -3.72242342E-01,
                            -2.91192646E-01, 6.25926904E-02, 1.48109745E-01, 7.72403532E-01,
                            8.60945181E-01, 8.90777103E-01, 8.95101881E-01, 1.06576889E+00,
                            1.19348317E+00, 1.72906487E+00, 1.74638848E+00, 1.77979372E+00,
                            2.28055071E+00, 2.57705471E+00, 3.55187200E+00])
    mo_occ = np.zeros((nindbasis))
    mo_occ[0], mo_occ[1], mo_occ[2], mo_occ[3], mo_occ[4] = 2.00, 2.00, 2.00, 2.00, 2.00
    mo_sym = np.full((nindbasis), '?', dtype=str)

    fn_mwfn = 'h2o_rks.mwfn'
    with path('iodata.test.data', fn_mwfn) as file_mwfn:
        mol = load_one(str(file_mwfn))
    assert_equal(mo_energies, mol.mo.energies)
    assert_equal(mo_occ, mol.mo.occs)
    assert_equal(10.0, mol.nelec)
    assert_equal(mo_sym, mol.extra['mo_sym'])
    assert_equal(atcoords, mol.atcoords)
    assert mol.charge == 0.00
    assert_equal(mol.obasis.shells[0].exponents, np.array([5.48467166E+03, 8.25234946E+02,
                                                       1.88046958E+02, 5.29645000E+01,
                                                       1.68975704E+01, 5.79963534E+00]
                                                      )
                 )
    assert mol.obasis.shells[1].exponents[0] == 1.55396162E+01
    assert_equal(mol.obasis.shells[0].coeffs, np.array([[1.83107443E-03], [1.39501722E-02],
                                                       [6.84450781E-02], [2.32714336E-01],
                                                       [4.70192898E-01], [3.58520853E-01]]
                                                      )
                 )
    assert mol.obasis.shells[1].coeffs[0] == -1.10777550E-01
    assert_equal(shelltypes, mol.extra['shell_types'])
    assert_equal(shellcenters-1, mol.extra['shell_centers'])
    assert_equal(shell_contr_deg, mol.extra['prim_per_shell'])
    assert mol.energy == energy
    assert mol.extra['wfntype'] == wfntype
    assert mol.extra['nprimshells'] == nprimshell
    assert mol.extra['nprims'] == nprims
    assert mol.extra['nbasis'] == nbasis
    assert mol.extra['nindbasis'] == nindbasis

def test_restricted_mp2_h2co():
    fn_mwfn = 'h2co_rmp2.mwfn'
    with path('iodata.test.data', fn_mwfn) as file_mwfn:
        mol = load_one(str(file_mwfn))
    assert mol.mo.coeffs.shape == (88, 88)
    assert len(mol.mo.energies) == 88
    assert len(mol.mo.occs) == 88
    assert np.rint(mol.nelec) == 16
    shell_types = np.array([0,0,0,0,1,1,1,-2,-2,-3,0,0,0,1,1,-2,0,0,0,0,1,1,1,-2,-2,-3,0,0,0,1,1,-2])
    assert_equal(shell_types, mol.extra['shell_types'])
    coeffs = np.array([ -8.46644381E-01,  1.12014735E-02, -3.49013850E-02, -1.89471970E-03,  0.00000000E+00,
                      0.00000000E+00, -8.05602400E-04,  0.00000000E+00,  0.00000000E+00, -3.20872000E-04,
                      0.00000000E+00,  0.00000000E+00, -4.45941900E-04, -4.10008300E-04,  0.00000000E+00,
                      0.00000000E+00,  3.00830000E-04,  0.00000000E+00,  2.40266600E-04,  0.00000000E+00,
                      0.00000000E+00,  1.81478400E-04,  0.00000000E+00, -5.64670300E-04,  0.00000000E+00,
                      0.00000000E+00, -4.12148700E-04,  0.00000000E+00,  0.00000000E+00,  0.00000000E+00,
                      9.67635800E-04,  1.33029380E-03,  6.94124700E-04,  0.00000000E+00, -3.57337200E-04,
                      2.08135100E-04,  0.00000000E+00, -2.56790000E-05,  1.43748300E-04, -7.56872000E-05,
                      0.00000000E+00, -2.34394700E-04, -8.45706000E-05,  0.00000000E+00,  4.93721852E-01,
                     -7.49111610E-03,  2.10736978E-02, -1.35169140E-03,  0.00000000E+00,  0.00000000E+00,
                     -2.16313770E-03,  0.00000000E+00,  0.00000000E+00, -1.19353850E-03,  0.00000000E+00,
                      0.00000000E+00, -1.08079150E-03,  1.58686000E-04,  0.00000000E+00,  0.00000000E+00,
                     -7.40967000E-05,  0.00000000E+00,  1.11120200E-04,  0.00000000E+00,  0.00000000E+00,
                     -8.19860000E-06,  0.00000000E+00,  8.32140000E-06,  0.00000000E+00,  0.00000000E+00,
                     -4.64235000E-05,  0.00000000E+00,  0.00000000E+00,  0.00000000E+00,  9.67635800E-04,
                      1.33029380E-03,  6.94124700E-04,  0.00000000E+00,  3.57337200E-04,  2.08135100E-04,
                      0.00000000E+00,  2.56790000E-05,  1.43748300E-04, -7.56872000E-05,  0.00000000E+00,
                      2.34394700E-04, -8.45706000E-05,  0.00000000E+00])
    assert_equal(coeffs, mol.mo.coeffs[:, 0])
    coeffs[44] += 1
    c_test = np.allclose(coeffs, mol.mo.coeffs[:, 0])
    assert c_test == False


def test_mwfn_low_h20_uks():
    data = helper_load_mwfn_low('h2o_uks.mwfn')


def test_load_mwfn_low_h20_uks():
    fn_mwfn = 'h2o_uks.mwfn'
    with path('iodata.test.data', fn_mwfn) as file_mwfn:
        mol = load_one(str(file_mwfn))

def test_dump_one():
    fn_mwfn = 'h2o_uks.mwfn'
    with path('iodata.test.data', fn_mwfn) as file_mwfn:
        mol = load_one(str(file_mwfn))
    fn_tmp = 'test.mwfn'
    dump_one(mol, fn_tmp)
    print(atom)


def test_dump_one_wfn_to_mwfn():
    fn_mwfn = 'h2o_sto3g.wfn'
    with path('iodata.test.data', fn_mwfn) as file_mwfn:
        mol = load_one(str(file_mwfn))
    fn_tmp = 'test.mwfn'
    dump_one(mol, fn_tmp)
    print(atom)
